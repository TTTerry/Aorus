// KBLedStyleDlg.cpp : implementation file
//

#include "stdafx.h"
#include "AORUS.h"
#include "KBLedStyleDlg.h"
#include "AORUSDlg.h"
#include "KBLedDlg.h"




int CKBLedStyleDlg::s_nWords = LKEY_KBLEDS_QTY;
LANG_WORD CKBLedStyleDlg::s_Words[48] = 
{
	LANG_WORD(LKEY_KBLEDS_CONSISTENCE,	_T("单色显示"),	_T("單色顯示"),	_T("CONSISTENCE")),
	LANG_WORD(LKEY_KBLEDS_PULSING,		_T("呼吸灯"),		_T("呼吸燈"),		_T("PULSING")),
	LANG_WORD(LKEY_KBLEDS_REACTIVE,		_T("互动反应"),	_T("互動反應"),	_T("REACTIVE")),
	LANG_WORD(LKEY_KBLEDS_RIPPLE,		_T("波纹"),			_T("波紋"),			_T("RIPPLE")),
	LANG_WORD(LKEY_KBLEDS_CYCLING,		_T("多色循环"),	_T("多色循環"),	_T("CYCLING")),
	LANG_WORD(LKEY_KBLEDS_WAVE,			_T("波浪"),			_T("波浪"),			_T("WAVE")),
	LANG_WORD(LKEY_KBLEDS1_BRIGHTNESS,	_T("亮度"), _T("亮度"), _T("BRIGHTNESS")),
	LANG_WORD(LKEY_KBLEDS1_SPEED,		_T("速度"), _T("速度"), _T("SPEED")),
	LANG_WORD(LKEY_KBLEDS2_BRIGHTNESS,	_T("亮度"), _T("亮度"), _T("BRIGHTNESS")),
	LANG_WORD(LKEY_KBLEDS2_SPEED,		_T("速度"), _T("速度"), _T("SPEED")),
	LANG_WORD(LKEY_KBLEDS2_COLOR,		_T("颜色"), _T("顏色"), _T("COLOR")),
	LANG_WORD(LKEY_KBLEDS2_RANDOM,		_T("随机"), _T("隨機"), _T("RANDOM")),
	LANG_WORD(LKEY_KBLEDS3_BRIGHTNESS,	_T("亮度"), _T("亮度"), _T("BRIGHTNESS")),
	LANG_WORD(LKEY_KBLEDS3_SPEED,		_T("速度"), _T("速度"), _T("SPEED")),
	LANG_WORD(LKEY_KBLEDS3_DURATION,	_T("持续时间"), _T("持續時間"), _T("DURATION")),
};

IMPLEMENT_DYNAMIC(CKBLedStyleDlg, CUiDlg)

CKBLedStyleDlg::CKBLedStyleDlg(CWnd* pParent /*=NULL*/)
	: CUiDlg(CKBLedStyleDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	bSyncCyclingSty = false;//統一控燈CYCLING界面顯示標誌位
}

CKBLedStyleDlg::~CKBLedStyleDlg()
{
}

void CKBLedStyleDlg::DoDataExchange(CDataExchange* pDX)
{
	CUiDlg::DoDataExchange(pDX);
}


BEGIN_MESSAGE_MAP(CKBLedStyleDlg, CUiDlg)
	ON_MESSAGE(WM_UI_SLIDER_MOVED, OnUiSliderMoved)
	ON_MESSAGE(WM_UI_SLIDER_MOVING, OnUiSliderMoving)
	//ON_MESSAGE(WM_UI_MULITSLIDER_MOVED, OnUiSliderMoved)
	ON_MESSAGE(WM_UI_MULITSLIDER_MOVING, OnUiSliderMoving)
	ON_MESSAGE(WM_UI_MULITSLIDER_MOVED, OnUiMulitSliderMoved)
	ON_MESSAGE(WM_UI_EDIT_CHANGE, OnUiEditChanged)
	ON_MESSAGE(WM_UI_BUTTON_CLICKED, OnUiButtonClicked)
	ON_MESSAGE(WM_UI_COMBOBOX_SELCHANGED, OnUiComboBoxSelChanged)	
	ON_MESSAGE(WM_UI_ANGLE_CHANGE, OnUiAngleChange)
	ON_WM_NCHITTEST()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_ACTIVATE()
	ON_WM_MOVING()
END_MESSAGE_MAP()


// CKBLedStyleDlg message handlers

BOOL CKBLedStyleDlg::OnInitDialog()
{
	ModifyStyleEx(WS_EX_APPWINDOW,WS_EX_TOOLWINDOW);
	CUiDlg::OnInitDialog();
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: Add extra initialization here

	Ui();
	//InitState();


	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}
/////////////////////////////////////////////////////////////////////////////////////////
//
// system message.
//
/////////////////////////////////////////////////////////////////////////////////////////
LRESULT CKBLedStyleDlg::OnNcHitTest(CPoint point)
{
	UINT uRes = (UINT)CUiDlg::OnNcHitTest(point);
	if(uRes == HTCLIENT) 
	{
		uRes = HTCAPTION;
	}

	return uRes;
}

void CKBLedStyleDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CUiDlg::OnPaint();
	}
}

HCURSOR CKBLedStyleDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

void CKBLedStyleDlg::OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized)
{
	CAORUSDlg* pParent = (CAORUSDlg*)AfxGetMainWnd();
	pParent->SetWindowPos(&wndTop, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOACTIVATE | SWP_NOSIZE);
	CUiDlg::OnActivate(nState, pWndOther, bMinimized);
}

void CKBLedStyleDlg::OnMoving(UINT fwSide, LPRECT pRect)
{
	//Terry 2017/07/06 LED窗口放置在右側
// 	CUiDlg::OnMoving(fwSide, pRect);
// 
// 	CRect rcCli;
// 	CAORUSDlg* pParent = (CAORUSDlg*)AfxGetMainWnd();
// 	GetClientRect(rcCli);
// 	ClientToScreen(&rcCli);
// 
// 	pParent->OnFollowMove(3, pParent->OnFit(rcCli, rcCli.Width(), -79));
	CUiDlg::OnMoving(fwSide, pRect);

	CRect rcCli;
	CAORUSDlg* pParent = (CAORUSDlg*)AfxGetMainWnd();
	pParent->GetClientRect(rcCli);
	int nWidth = rcCli.Width();
	GetClientRect(rcCli);
	ClientToScreen(&rcCli);

	pParent->OnFollowMove(4, pParent->OnFit(rcCli, 0 - nWidth, -79));
}


void CKBLedStyleDlg::OnClose()
{
	ShowWindow(SW_HIDE);
}

void CKBLedStyleDlg::Ui(void)
{
	UiMain();
	LoadPresent();
}

void CKBLedStyleDlg::UiMain(void)
{
	SetBkBitmap(IDB_KBLEDSTYLE_BG, 0xff, CLR_TRPT);
	int movePosition = 40;

	m_combobox[COMBOX_KBLEDS_STYLE].Create(CRect(20, 50, 0, 0), this, COMBOX_KBLEDS_STYLE);
	m_combobox[COMBOX_KBLEDS_STYLE].SetComboBoxBitmap(IDB_VGALED_COMB_NORMAL, IDB_VGALED_COMB_NORMAL, IDB_VGALED_COMB_NORMAL, 0, CLR_NONE);
	m_combobox[COMBOX_KBLEDS_STYLE].SetFont(Font(11), CLR_WHITE);
	m_combobox[COMBOX_KBLEDS_STYLE].SetCursor(IDC_CUR_HAND);
	m_combobox[COMBOX_KBLEDS_STYLE].SetArrowWidth(20);
	m_combobox[COMBOX_KBLEDS_STYLE].GetDropList()->SetFont(Font(11),CLR_WHITE);
	m_combobox[COMBOX_KBLEDS_STYLE].GetDropList()->SetBkColor(RGB(0, 0, 0));
	m_combobox[COMBOX_KBLEDS_STYLE].GetDropList()->SetHighlightBkColor(CLR_MAIN);
	m_combobox[COMBOX_KBLEDS_STYLE].ModifyCtrlStyle(ST_RIGHT,ST_LEFT);

	m_combobox[COMBOX_KBLEDS_STYLE].AddString(CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS_CONSISTENCE),  0, CLR_WHITE);
	m_combobox[COMBOX_KBLEDS_STYLE].AddString(CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS_PULSING),		0, CLR_WHITE);
	m_combobox[COMBOX_KBLEDS_STYLE].AddString(CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS_REACTIVE),		0, CLR_WHITE);
	m_combobox[COMBOX_KBLEDS_STYLE].AddString(CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS_RIPPLE),		0, CLR_WHITE);
	m_combobox[COMBOX_KBLEDS_STYLE].AddString(CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS_CYCLING),		0, CLR_WHITE);
	m_combobox[COMBOX_KBLEDS_STYLE].AddString(CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS_WAVE),			0, CLR_WHITE);
	m_combobox[COMBOX_KBLEDS_STYLE].SetCurSel(0);


	UI_STATIC stc[] =
	{
		UI_STATIC(this, STC_KEYLEDS_CONSISTANCE, CRect(6, 75, 0, 0), _T(""), IDB_KBLED_BGBLACK, CLR_NONE),
		UI_STATIC(this, STC_KEYLEDS_PULSING, CRect(6, 75, 0, 0), _T(""), IDB_KBLED_BGBLACK, CLR_NONE),
		UI_STATIC(this, STC_KEYLEDS_REACTIVE, CRect(6, 75, 0, 0), _T(""), IDB_KBLED_BGBLACK, CLR_NONE),
		UI_STATIC(this, STC_KEYLEDS_RIPPLE, CRect(6, 75, 0, 0), _T(""), IDB_KBLED_BGBLACK, CLR_NONE),
		UI_STATIC(this, STC_KEYLEDS_CYCING, CRect(6, 75, 0, 0), _T(""), IDB_KBLED_BGBLACK, CLR_NONE),
		UI_STATIC(this, STC_KEYLEDS_WAVE, CRect(6, 75, 0, 0), _T(""), IDB_KBLED_BGBLACK, CLR_NONE),

		//UI_STATIC(&m_stc[STC_KEYLEDS_CONSISTANCE], STC_KBLEDS1_SPEED, CRect(10, 10, 90, 25), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS1_SPEED), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_CONSISTANCE], STC_KBLEDS1_BRIGHTNESS,		CRect(17, 28, 92, 43), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS1_BRIGHTNESS), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_CONSISTANCE], STC_KBLEDS1_COLORBG,	CRect( 13, 80+40,  0,  0), _T(""), IDB_LED_BG_COLOR, CLR_TRPT),

		UI_STATIC(&m_stc[STC_KEYLEDS_PULSING], STC_KBLEDS2_BRIGHTNESS, CRect(17, 28, 92, 43), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS2_BRIGHTNESS), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_PULSING], STC_KBLEDS2_SPEED,		CRect(17, 58, 92, 73), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS2_SPEED), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_PULSING], STC_KBLEDS2_COLORBG,	CRect( 7+movePosition,100+20,  0,  0), _T(""), IDB_LED_BG_COLOR, CLR_TRPT),

		//UI_STATIC(&m_stc[STC_KEYLEDS_REACTIVE], STC_KBLEDS3_BRIGHTNESS, CRect(10, 10, 90, 25), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS3_BRIGHTNESS), NULL, CLR_NONE),
		//UI_STATIC(&m_stc[STC_KEYLEDS_REACTIVE], STC_KBLEDS3_SPEED,		CRect(10, 30, 90, 45), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS3_SPEED), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_REACTIVE], STC_KBLEDS3_DURATION,	CRect(17, 28, 92, 43), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS3_DURATION), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_REACTIVE], STC_KBLEDS3_COLORBG,	CRect( 13, 120,  0,  0), _T(""), IDB_LED_BG_COLOR, CLR_TRPT),

	//	UI_STATIC(&m_stc[STC_KEYLEDS_RIPPLE], STC_KBLEDS4_BRIGHTNESS, CRect(10, 30, 90, 45), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS1_BRIGHTNESS), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_RIPPLE], STC_KBLEDS4_SPEED,		CRect(17, 28, 92, 43), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS1_SPEED), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_RIPPLE], STC_KBLEDS4_COLORBG,	CRect( 8, 124,  0,  0), _T(""), IDB_KBLED_BAR_BG_COLOR, CLR_TRPT),
		UI_STATIC(&m_stc[STC_KEYLEDS_RIPPLE], STC_KBLEDS4_START, CRect(10, 160, 53, 185), _T("START"),NULL, CLR_TRPT),
		UI_STATIC(&m_stc[STC_KEYLEDS_RIPPLE], STC_KBLEDS4_END, CRect(158, 160, 188, 315), _T("END"),NULL, CLR_TRPT),
		UI_STATIC(&m_stc[STC_KEYLEDS_RIPPLE], STC_KBLEDS4_WIDTH, CRect(10, 195, 58, 220), _T("WIDTH"),NULL, CLR_TRPT),
		UI_STATIC(&m_stc[STC_KEYLEDS_RIPPLE], STC_KBLEDS4_TIMES, CRect(158, 195, 206, 220), _T("TIMES"),NULL, CLR_TRPT),

		UI_STATIC(&m_stc[STC_KEYLEDS_CYCING], STC_KBLEDS5_BRIGHTNESS, CRect(17, 28, 92, 43), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS1_BRIGHTNESS), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_CYCING], STC_KBLEDS5_SPEED,		CRect(17, 58, 92, 73), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS1_SPEED), NULL, CLR_NONE),
		//UI_STATIC(&m_stc[STC_KEYLEDS_CYCING], STC_KBLEDS5_COLORBG,	CRect( 7, 80,  0,  0), _T(""), IDB_LED_BG_COLOR, CLR_TRPT),

	//	UI_STATIC(&m_stc[STC_KEYLEDS_WAVE], STC_KBLEDS6_BRIGHTNESS, CRect(10, 10, 90, 25), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS1_BRIGHTNESS), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_WAVE], STC_KBLEDS6_SPEED,		CRect(17, 28, 92, 43), CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS1_SPEED), NULL, CLR_NONE),
		UI_STATIC(&m_stc[STC_KEYLEDS_WAVE], STC_KBLEDS6_COLORBG,	CRect( 8, 124,  0,  0), _T(""), IDB_KBLED_BAR_BG_COLOR, CLR_TRPT),
		UI_STATIC(&m_stc[STC_KEYLEDS_WAVE], STC_KBLEDS6_START, CRect(10, 160, 53, 185), _T("START"),NULL, CLR_TRPT),
		UI_STATIC(&m_stc[STC_KEYLEDS_WAVE], STC_KBLEDS6_END, CRect(158, 160, 188, 315), _T("END"),NULL, CLR_TRPT),
		UI_STATIC(&m_stc[STC_KEYLEDS_WAVE], STC_KBLEDS6_ANGLE, CRect(50, 195, 98, 220), _T("ANGLE"),NULL, CLR_TRPT),
		UI_STATIC(&m_stc[STC_KEYLEDS_WAVE], STC_KBLEDS6_TIMES, CRect(158, 195, 206, 220), _T("TIMES"),NULL, CLR_TRPT),
	};

	for (int i = STC_KEYLEDS_CONSISTANCE;i < STC_KEYLEDS_NUM; i++)
	{
		m_stc[i].CreateStatic(stc[i - (int)STC_KEYLEDS_CONSISTANCE]);
 		m_stc[i].ModifyCtrlStyle(ST_VCENTER, ST_LEFT);
		if((i == STC_KBLEDS4_START) || (i == STC_KBLEDS4_END) || (i == STC_KBLEDS4_WIDTH) || (i == STC_KBLEDS4_TIMES) || (i == STC_KBLEDS6_START) \
			|| (i == STC_KBLEDS6_END) || (i == STC_KBLEDS6_ANGLE) || (i == STC_KBLEDS6_TIMES))
		{
			m_stc[i].SetFont(Font(11), CLR_WHITE);
		}
		else
				m_stc[i].SetFont(Font(11), CLR_MAIN);
	}
	

	m_stc[STC_KEYLEDS_CONSISTANCE].SetBkColor(CLR_WHITE);

 	UI_BTN btn[] = 
 	{
 		UI_BTN(this, BTN_KBLEDS_ONOFF, CRect(160+60, 50, 0,  0), &UIBTN_IMAGE(IDB_VGALED_EFFECTS_OFF, IDB_VGALED_EFFECTS_OFF, IDB_VGALED_EFFECTS_OFF, 0, IDB_VGALED_EFFECTS_ON, IDB_VGALED_EFFECTS_ON, IDB_VGALED_EFFECTS_ON, 0, CLR_TRPT), NULL, BTN_CHECK),
 		UI_BTN(this, BTN_KBLEDS_CLOSE, CRect(270, 10, 0,  0), &UIBTN_IMAGE(IDB_HOME_CLOSEON, IDB_HOME_CLOSEON, IDB_HOME_CLOSEON, IDB_HOME_CLOSEON, 0, 0, 0, 0, CLR_TRPT)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_1,   CRect(  9, 3,  24, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_2,   CRect( 34, 3,  49, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_3,   CRect( 59, 3,  74, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_4,   CRect( 83, 3,  98, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_5,   CRect(108, 3, 123, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_6,   CRect(133, 3, 148, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_7,   CRect(158, 3, 174, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_8,   CRect(182, 3, 197, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS1_COLORBG], BTN_KBLEDS1_COLOR_9,   CRect(207, 3, 222, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_1,   CRect(  9, 3,  24, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_2,   CRect( 34, 3,  49, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_3,   CRect( 59, 3,  74, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_4,   CRect( 83, 3,  98, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_5,   CRect(108, 3, 123, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_6,   CRect(133, 3, 148, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_7,   CRect(158, 3, 174, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_8,   CRect(182, 3, 197, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
 		UI_BTN(&m_stc[STC_KBLEDS2_COLORBG], BTN_KBLEDS2_COLOR_9,   CRect(207, 3, 222, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
  		UI_BTN(&m_stc[STC_KEYLEDS_PULSING], BTN_KBLEDS2_SEL1,  CRect( 10,  100+20, 0, 0), &UIBTN_IMAGE(IDB_KBLED_CLR_UNCHECKED, IDB_KBLED_CLR_UNCHECKED, IDB_KBLED_CLR_UNCHECKED, IDB_KBLED_CLR_UNCHECKED, IDB_KBLED_CLR_CHECKED, IDB_KBLED_CLR_CHECKED, IDB_KBLED_CLR_CHECKED, IDB_KBLED_CLR_UNCHECKED, CLR_TRPT), NULL, BTN_RADIO),
  		UI_BTN(&m_stc[STC_KEYLEDS_PULSING], BTN_KBLEDS2_SEL2,  CRect(10, 135+30, 0, 0), &UIBTN_IMAGE(IDB_KBLED_CLR_UNCHECKED, IDB_KBLED_CLR_UNCHECKED, IDB_KBLED_CLR_UNCHECKED, IDB_KBLED_CLR_UNCHECKED, IDB_KBLED_CLR_CHECKED, IDB_KBLED_CLR_CHECKED, IDB_KBLED_CLR_CHECKED, IDB_KBLED_CLR_UNCHECKED, CLR_TRPT), NULL, BTN_RADIO),
  		UI_BTN(&m_btn[BTN_KBLEDS2_SEL1], BTN_KBLEDS2_CLR1, CRect(  3,   1, 0, 0), &UIBTN_IMAGE(0, 0, 0, 0, IDB_KBLED_BUTTON_CHECKED, IDB_KBLED_BUTTON_CHECKED, IDB_KBLED_BUTTON_CHECKED, 0, CLR_TRPT), NULL, BTN_CHECK),
  		UI_BTN(&m_btn[BTN_KBLEDS2_SEL2], BTN_KBLEDS2_CLR2, CRect(  3,   1, 0, 0), &UIBTN_IMAGE(0, 0, 0, 0, IDB_KBLED_BUTTON_CHECKED, IDB_KBLED_BUTTON_CHECKED, IDB_KBLED_BUTTON_CHECKED, 0, CLR_TRPT), NULL, BTN_CHECK),

		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_1,   CRect(  9, 3,  24, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_2,   CRect( 34, 3,  49, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_3,   CRect( 59, 3,  74, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_4,   CRect( 83, 3,  98, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_5,   CRect(108, 3, 123, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_6,   CRect(133, 3, 148, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_7,   CRect(158, 3, 174, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_8,   CRect(182, 3, 197, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS3_COLORBG], BTN_KBLEDS3_COLOR_9,   CRect(207, 3, 222, 18), &UIBTN_IMAGE(0,	0,	0,	0)),

		UI_BTN(&m_stc[STC_KEYLEDS_RIPPLE], BTN_KBLEDS4_ADDMODE,   CRect(168, 90, 0, 0), &UIBTN_IMAGE(IDB_VGAPRO_ADDFILE,  IDB_VGAPRO_ADDFILE,  IDB_VGAPRO_ADDFILE,  0, CLR_TRPT)),
		UI_BTN(&m_stc[STC_KEYLEDS_RIPPLE], BTN_KBLEDS4_DELMODE,   CRect(192, 90, 0, 0), &UIBTN_IMAGE(IDB_VGAPRO_DELETEFILE,  IDB_VGAPRO_DELETEFILE,  IDB_VGAPRO_DELETEFILE,  0, CLR_TRPT)),
 		UI_BTN(&m_stc[STC_KEYLEDS_RIPPLE], BTN_KBLEDS4_WIDTH_UP,   CRect(114, 195, 0, 0), &UIBTN_IMAGE(IDB_MONI_NUM_UP,	IDB_MONI_NUM_UP,	IDB_MONI_NUM_UP,	0, CLR_TRPT)),
 		UI_BTN(&m_stc[STC_KEYLEDS_RIPPLE], BTN_KBLEDS4_WIDTH_DOWN,   CRect(114, 203, 0, 0), &UIBTN_IMAGE(IDB_MONI_NUM_DOWN, IDB_MONI_NUM_DOWN, IDB_MONI_NUM_DOWN, 0, CLR_TRPT)),
		UI_BTN(&m_stc[STC_KEYLEDS_RIPPLE], BTN_KBLEDS4_TIME_UP,   CRect(249, 195, 0, 0), &UIBTN_IMAGE(IDB_MONI_NUM_UP,	IDB_MONI_NUM_UP,	IDB_MONI_NUM_UP,	0, CLR_TRPT)),
 		UI_BTN(&m_stc[STC_KEYLEDS_RIPPLE], BTN_KBLEDS4_TIME_DOWN,   CRect(249, 203, 0, 0), &UIBTN_IMAGE(IDB_MONI_NUM_DOWN, IDB_MONI_NUM_DOWN, IDB_MONI_NUM_DOWN, 0, CLR_TRPT)),

		/*UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_1,   CRect(  9, 3,  24, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_2,   CRect( 34, 3,  49, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_3,   CRect( 59, 3,  74, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_4,   CRect( 83, 3,  98, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_5,   CRect(108, 3, 123, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_6,   CRect(133, 3, 148, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_7,   CRect(158, 3, 174, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_8,   CRect(182, 3, 197, 18), &UIBTN_IMAGE(0,	0,	0,	0)),
		UI_BTN(&m_stc[STC_KBLEDS5_COLORBG], BTN_KBLEDS5_COLOR_9,   CRect(207, 3, 222, 18), &UIBTN_IMAGE(0,	0,	0,	0)),*/

		UI_BTN(&m_stc[STC_KEYLEDS_WAVE], BTN_KBLEDS6_ADDMODE,   CRect(168, 90, 0, 0), &UIBTN_IMAGE(IDB_VGAPRO_ADDFILE,  IDB_VGAPRO_ADDFILE,  IDB_VGAPRO_ADDFILE,  0, CLR_TRPT)),
		UI_BTN(&m_stc[STC_KEYLEDS_WAVE], BTN_KBLEDS6_DELMODE,   CRect(192, 90, 0, 0), &UIBTN_IMAGE(IDB_VGAPRO_DELETEFILE,  IDB_VGAPRO_DELETEFILE,  IDB_VGAPRO_DELETEFILE,  0, CLR_TRPT)),
 		UI_BTN(&m_stc[STC_KEYLEDS_WAVE], BTN_KBLEDS6_ANGLE_UP,   CRect(120, 195, 0, 0), &UIBTN_IMAGE(IDB_MONI_NUM_UP,	IDB_MONI_NUM_UP,	IDB_MONI_NUM_UP,	0, CLR_TRPT)),
 		UI_BTN(&m_stc[STC_KEYLEDS_WAVE], BTN_KBLEDS6_ANGLE_DOWN,   CRect(120, 203, 0, 0), &UIBTN_IMAGE(IDB_MONI_NUM_DOWN, IDB_MONI_NUM_DOWN, IDB_MONI_NUM_DOWN, 0, CLR_TRPT)),
		UI_BTN(&m_stc[STC_KEYLEDS_WAVE], BTN_KBLEDS6_TIME_UP,   CRect(219, 195, 0, 0), &UIBTN_IMAGE(IDB_MONI_NUM_UP,	IDB_MONI_NUM_UP,	IDB_MONI_NUM_UP,	0, CLR_TRPT)),
 		UI_BTN(&m_stc[STC_KEYLEDS_WAVE], BTN_KBLEDS6_TIME_DOWN,   CRect(219, 203, 0, 0), &UIBTN_IMAGE(IDB_MONI_NUM_DOWN, IDB_MONI_NUM_DOWN, IDB_MONI_NUM_DOWN, 0, CLR_TRPT)),
	};
 
 	for (int i = BTN_KBLEDS_ONOFF; i < BTN_KBLEDS_NUM; i++)
 	{
 		m_btn[i].CreateButton(btn[i - (int)BTN_KBLEDS_ONOFF]);
 		m_btn[i].SetCursor(IDC_CUR_HAND);
 	}
	m_btn[BTN_KBLEDS_ONOFF].SetCheck(true);

//CONSISTANCE
#if 1
	m_edit[EDIT_KBLEDS1_R].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(23, 67, 52, 79), &m_stc[STC_KBLEDS1_COLORBG], EDIT_KBLEDS1_R);
	m_edit[EDIT_KBLEDS1_R].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS1_R].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS1_R].SetAsIntNumberEdit(3);

	m_edit[EDIT_KBLEDS1_G].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(75, 67, 104, 79), &m_stc[STC_KBLEDS1_COLORBG], EDIT_KBLEDS1_G);
	m_edit[EDIT_KBLEDS1_G].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS1_G].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS1_G].SetAsIntNumberEdit(3);

	m_edit[EDIT_KBLEDS1_B].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(126, 67, 156, 79), &m_stc[STC_KBLEDS1_COLORBG], EDIT_KBLEDS1_B);
	m_edit[EDIT_KBLEDS1_B].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS1_B].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS1_B].SetAsIntNumberEdit(3);

	//m_slider[SLIDER_KBLEDS1_SPEED].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_CONSISTANCE], SLIDER_KBLEDS1_SPEED,	CRect(99,  10,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	m_slider[SLIDER_KBLEDS1_BRGIHTNESS].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_CONSISTANCE], SLIDER_KBLEDS1_BRGIHTNESS, CRect(99,  30,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	m_slider[SLIDER_KBLEDS1_RGB].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KBLEDS1_COLORBG], SLIDER_KBLEDS1_RGB,	CRect(2, 32, 229, 49), IDB_SLIDER_RGBBAR, IDB_SLIDER_RGBBAR, 0, 0, 0, 0, CLR_TRPT));

	m_slider[SLIDER_KBLEDS1_RGB].SetRange(0, 359);
	//m_slider[SLIDER_KBLEDS1_SPEED].SetRange(0, 10);
	//m_slider[SLIDER_KBLEDS1_BRGIHTNESS].SetRange(0 ,100);
	m_slider[SLIDER_KBLEDS1_BRGIHTNESS].SetRange(0, 10);
	m_slider[SLIDER_KBLEDS1_BRGIHTNESS].SetPos(10);
	OnColor(RGB(255, 0, 0));
#endif
//PULSING
#if 1
	m_btn[BTN_KBLEDS2_SEL1].SetCheck(true);
	m_btn[BTN_KBLEDS2_CLR1].SetCheck(true);
	m_btn[BTN_KBLEDS2_SEL1].SetBkColor(s_clr[0]);
	m_btn[BTN_KBLEDS2_SEL2].SetBkColor(s_clr[2]);


	m_edit[EDIT_KBLEDS2_R].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(23, 67, 52, 79), &m_stc[STC_KBLEDS2_COLORBG], EDIT_KBLEDS2_R);
 	m_edit[EDIT_KBLEDS2_R].SetFont(Font(9), CLR_WHITE);
 	m_edit[EDIT_KBLEDS2_R].SetBkColor(CLR_DARK);
 	m_edit[EDIT_KBLEDS2_R].SetAsIntNumberEdit(3);
 
 	m_edit[EDIT_KBLEDS2_G].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(75, 67, 104, 79), &m_stc[STC_KBLEDS2_COLORBG], EDIT_KBLEDS2_G);
 	m_edit[EDIT_KBLEDS2_G].SetFont(Font(9), CLR_WHITE);
 	m_edit[EDIT_KBLEDS2_G].SetBkColor(CLR_DARK);
 	m_edit[EDIT_KBLEDS2_G].SetAsIntNumberEdit(3);
 
 	m_edit[EDIT_KBLEDS2_B].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(126, 67, 156, 79), &m_stc[STC_KBLEDS2_COLORBG], EDIT_KBLEDS2_B);
 	m_edit[EDIT_KBLEDS2_B].SetFont(Font(9), CLR_WHITE);
 	m_edit[EDIT_KBLEDS2_B].SetBkColor(CLR_DARK);
 	m_edit[EDIT_KBLEDS2_B].SetAsIntNumberEdit(3);

	m_slider[SLIDER_KBLEDS2_BRGIHTNESS].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_PULSING], SLIDER_KBLEDS2_BRGIHTNESS, CRect(99,  30,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
 	m_slider[SLIDER_KBLEDS2_SPEED].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_PULSING], SLIDER_KBLEDS2_SPEED,	CRect(99,  60,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
 	m_slider[SLIDER_KBLEDS2_RGB].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KBLEDS2_COLORBG], SLIDER_KBLEDS2_RGB,	CRect(2, 32, 229, 49), IDB_SLIDER_RGBBAR, IDB_SLIDER_RGBBAR, 0, 0, 0, 0, CLR_TRPT));
 
 	m_slider[SLIDER_KBLEDS2_RGB].SetRange(0, 359);
 	m_slider[SLIDER_KBLEDS2_SPEED].SetRange(0, 10);
 	m_slider[SLIDER_KBLEDS2_BRGIHTNESS].SetRange(0 ,10);
	m_slider[SLIDER_KBLEDS2_SPEED].SetPos(10);
	m_slider[SLIDER_KBLEDS2_BRGIHTNESS].SetPos(10);

//	OnColor(RGB(255, 0, 0));

	m_panelColor.Create(&m_stc[STC_KEYLEDS_PULSING], 1, CRect(15, 60, 255, 120));//77-20-40, 40, 256-20-40, 100
	m_panelColor.AddItem(&UIPC_ITEM(0, CRect(0, 24, 0, 0), &UIPC_IMAGE(IDB_RADIO_UNCHECK, IDB_RADIO_UNCHECK, IDB_RADIO_CHECKEDONE, CLR_TRPT), 
		&UIPC_STRING(CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS2_COLOR), ST_LEFT, CRect(27, 22, 70, 45) , CLR_WHITE, CLR_WHITE, CLR_WHITE, NULL, Font(11), Font(11), Font(11), NULL)));
	m_panelColor.AddItem(&UIPC_ITEM(1, CRect(110, 24, 0, 0), &UIPC_IMAGE(IDB_RADIO_UNCHECK, IDB_RADIO_UNCHECK, IDB_RADIO_CHECKEDONE, CLR_TRPT),
		&UIPC_STRING(CLangX::Get(s_Words, s_nWords, LKEY_KBLEDS2_RANDOM), ST_LEFT, CRect(135, 22, 188, 45) , CLR_WHITE, CLR_WHITE, CLR_WHITE, NULL, Font(11), Font(11), Font(11), NULL)));
	m_panelColor.SetCursor(IDC_CUR_HAND);
#endif

//Reactive
#if 1
	m_edit[EDIT_KBLEDS3_R].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(23, 67, 52, 79), &m_stc[STC_KBLEDS3_COLORBG], EDIT_KBLEDS3_R);
	m_edit[EDIT_KBLEDS3_R].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS3_R].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS3_R].SetAsIntNumberEdit(3);

	m_edit[EDIT_KBLEDS3_G].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(75, 67, 104, 79), &m_stc[STC_KBLEDS3_COLORBG], EDIT_KBLEDS3_G);
	m_edit[EDIT_KBLEDS3_G].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS3_G].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS3_G].SetAsIntNumberEdit(3);

	m_edit[EDIT_KBLEDS3_B].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(126, 67, 156, 79), &m_stc[STC_KBLEDS3_COLORBG], EDIT_KBLEDS3_B);
	m_edit[EDIT_KBLEDS3_B].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS3_B].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS3_B].SetAsIntNumberEdit(3);

	//m_slider[SLIDER_KBLEDS3_SPEED].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_REACTIVE], SLIDER_KBLEDS3_SPEED,	CRect(99,  10,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	//m_slider[SLIDER_KBLEDS3_BRGIHTNESS].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_REACTIVE], SLIDER_KBLEDS3_BRGIHTNESS, CRect(99,  30,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	m_slider[SLIDER_KBLEDS3_DURATION].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_REACTIVE], SLIDER_KBLEDS3_DURATION, CRect(99, 30,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	m_slider[SLIDER_KBLEDS3_RGB].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KBLEDS3_COLORBG], SLIDER_KBLEDS3_RGB,	CRect(2, 32, 229, 49), IDB_SLIDER_RGBBAR, IDB_SLIDER_RGBBAR, 0, 0, 0, 0, CLR_TRPT));

	m_slider[SLIDER_KBLEDS3_RGB].SetRange(0, 359);
	//m_slider[SLIDER_KBLEDS3_SPEED].SetRange(0, 10);
	//m_slider[SLIDER_KBLEDS3_BRGIHTNESS].SetRange(0 ,100);
	m_slider[SLIDER_KBLEDS3_DURATION].SetRange(0 ,10);
	m_slider[SLIDER_KBLEDS3_DURATION].SetPos(10);
	OnColor(RGB(255, 0, 0));
#endif

//Ripple
#if 1
	m_slider[SLIDER_KBLEDS4_SPEED].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_RIPPLE], SLIDER_KBLEDS4_SPEED,	CRect(99,  30,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	//m_slider[SLIDER_KBLEDS4_BRGIHTNESS].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_RIPPLE], SLIDER_KBLEDS4_BRGIHTNESS, CRect(99,  30,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	//	m_slider[SLIDER_KBLEDS4_BRGIHTNESS].SetRange(0 ,100);
	//m_slider[SLIDER_KBLEDS4_RGB].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KBLEDS4_COLORBG], SLIDER_KBLEDS4_RGB,	CRect(2, 1, 216, 15), IDB_SLIDER_RGBBAR, IDB_SLIDER_RGBBAR, 0, 0, 0, 0, CLR_TRPT));
	//m_slider[SLIDER_KBLEDS4_RGB].SetRange(0, 359);
	m_mulitslider[SLIDER_KBLEDS4_RGB].CreateSliderCtrl(UI_MULITSLIDERCTRL(&m_stc[STC_KBLEDS4_COLORBG], SLIDER_KBLEDS4_RGB, CRect(2, 1, 216, 15), IDB_SLIDER_RGBBAR, IDB_SLIDER_RGBBAR, 0, IDB_KBLED_BAR_BG_COLOR, IDB_KBLED_BAR_BG_COLOR, 0, CLR_TRPT));	
	m_mulitslider[SLIDER_KBLEDS4_RGB].SetRange(0, 359);
	m_slider[SLIDER_KBLEDS4_SPEED].SetRange(0, 10);
	m_slider[SLIDER_KBLEDS4_SPEED].SetPos(10);


	//OnColor(RGB(255, 0, 0));

	m_edit[EDIT_KBLEDS4_WIDTH].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(68,  195, 108,  210), &m_stc[STC_KEYLEDS_RIPPLE], EDIT_KBLEDS4_WIDTH);
	m_edit[EDIT_KBLEDS4_WIDTH].SetFont(Font(12), CLR_WHITE);
	m_edit[EDIT_KBLEDS4_WIDTH].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS4_WIDTH].SetAsIntNumberEdit(1);
	m_edit[EDIT_KBLEDS4_WIDTH].SetWindowText(_T("1"));

	m_edit[EDIT_KBLEDS4_TIMES].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(208,  195, 248,  210), &m_stc[STC_KEYLEDS_RIPPLE], EDIT_KBLEDS4_TIMES);
	m_edit[EDIT_KBLEDS4_TIMES].SetFont(Font(12), CLR_WHITE);
	m_edit[EDIT_KBLEDS4_TIMES].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS4_TIMES].SetAsIntNumberEdit(1);
	m_edit[EDIT_KBLEDS4_TIMES].SetWindowText(_T("8"));

 	//m_combobox[COMBOX_KNLEDS_RIPPLE].Create(CRect(8, 90, 0, 0), &m_stc[STC_KEYLEDS_RIPPLE], COMBOX_KNLEDS_RIPPLE);
	m_combobox[COMBOX_KNLEDS_RIPPLE].Create(CRect(13, 90, 180, 106), &m_stc[STC_KEYLEDS_RIPPLE], COMBOX_KNLEDS_RIPPLE);
 	m_combobox[COMBOX_KNLEDS_RIPPLE].SetComboBoxBitmap(IDB_KBLED_CMB_ON, IDB_KBLED_CMB_ON, IDB_KBLED_CMB_ON, IDB_KBLED_CMB_OFF, CLR_TRPT);
 	m_combobox[COMBOX_KNLEDS_RIPPLE].SetFont(Font(12), CLR_WHITE); // 字体
 	m_combobox[COMBOX_KNLEDS_RIPPLE].SetCursor(IDC_CUR_HAND); // 鼠标手型
 	m_combobox[COMBOX_KNLEDS_RIPPLE].SetArrowWidth(20);
 	m_combobox[COMBOX_KNLEDS_RIPPLE].GetDropList()->SetFont(Font(14));
 	m_combobox[COMBOX_KNLEDS_RIPPLE].GetDropList()->SetBkColor(RGB(0, 0, 0));
 	m_combobox[COMBOX_KNLEDS_RIPPLE].GetDropList()->SetHighlightBkColor(CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_RIPPLE].ModifyCtrlStyle(ST_RIGHT,ST_LEFT);
 
 	m_combobox[COMBOX_KNLEDS_RIPPLE].AddString(_T("color spectrum"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_RIPPLE].SetCurSel(0);
 
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].Create(CRect(53, 160, 0, 0), &m_stc[STC_KEYLEDS_RIPPLE], COMBOX_KNLEDS_RIPPLE_START);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].SetComboBoxBitmap(IDB_KBLED_CMB_EDIT, IDB_KBLED_CMB_EDIT, IDB_KBLED_CMB_EDIT, 0, CLR_TRPT);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].SetFont(Font(11), CLR_WHITE); // 字体
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].SetCursor(IDC_CUR_HAND); // 鼠标手型
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].SetArrowWidth(2);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].GetDropList()->SetFont(Font(11));
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].GetDropList()->SetBkColor(RGB(0, 0, 0));
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].GetDropList()->SetHighlightBkColor(CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].ModifyCtrlStyle(ST_RIGHT,ST_LEFT);
 
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].AddString(_T("on key press"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].AddString(_T("automatic"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_START].SetCurSel(0);
 
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].Create(CRect(188, 160, 0, 0), &m_stc[STC_KEYLEDS_RIPPLE], COMBOX_KNLEDS_RIPPLE_END);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].SetComboBoxBitmap(IDB_KBLED_CMB_EDIT, IDB_KBLED_CMB_EDIT, IDB_KBLED_CMB_EDIT, 0, CLR_TRPT);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].SetFont(Font(11), CLR_WHITE); // 字体
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].SetCursor(IDC_CUR_HAND); // 鼠标手型
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].SetArrowWidth(2);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].GetDropList()->SetFont(Font(11));
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].GetDropList()->SetBkColor(RGB(0, 0, 0));
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].GetDropList()->SetHighlightBkColor(CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].ModifyCtrlStyle(ST_RIGHT,ST_LEFT);
 
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].AddString(_T("never"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].AddString(_T("time"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_RIPPLE_END].SetCurSel(0);
#endif

//Cycling
#if 1
	/*m_edit[EDIT_KBLEDS5_R].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(23, 67, 52, 79), &m_stc[STC_KBLEDS5_COLORBG], EDIT_KBLEDS5_R);
	m_edit[EDIT_KBLEDS5_R].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS5_R].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS5_R].SetAsIntNumberEdit(3);

	m_edit[EDIT_KBLEDS5_G].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(75, 67, 104, 79), &m_stc[STC_KBLEDS5_COLORBG], EDIT_KBLEDS5_G);
	m_edit[EDIT_KBLEDS5_G].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS5_G].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS5_G].SetAsIntNumberEdit(3);

	m_edit[EDIT_KBLEDS5_B].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(126, 67, 156, 79), &m_stc[STC_KBLEDS5_COLORBG], EDIT_KBLEDS5_B);
	m_edit[EDIT_KBLEDS5_B].SetFont(Font(9), CLR_WHITE);
	m_edit[EDIT_KBLEDS5_B].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS5_B].SetAsIntNumberEdit(3);*/

	m_slider[SLIDER_KBLEDS5_SPEED].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_CYCING], SLIDER_KBLEDS5_SPEED,	CRect(99,  60,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	m_slider[SLIDER_KBLEDS5_BRGIHTNESS].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_CYCING], SLIDER_KBLEDS5_BRGIHTNESS, CRect(99,  30,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	//m_slider[SLIDER_KBLEDS5_RGB].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KBLEDS5_COLORBG], SLIDER_KBLEDS5_RGB,	CRect(2, 32, 229, 49), IDB_SLIDER_RGBBAR, IDB_SLIDER_RGBBAR, 0, 0, 0, 0, CLR_TRPT));

	//m_slider[SLIDER_KBLEDS5_RGB].SetRange(0, 359);
	m_slider[SLIDER_KBLEDS5_SPEED].SetRange(0, 10);
	m_slider[SLIDER_KBLEDS5_BRGIHTNESS].SetRange(0 ,10);
	m_slider[SLIDER_KBLEDS5_SPEED].SetPos(10);
	m_slider[SLIDER_KBLEDS5_BRGIHTNESS].SetPos(10);
	m_slider[SLIDER_KBLEDS5_SPEED].ShowWindow(SW_HIDE);
	m_stc[STC_KBLEDS5_SPEED].ShowWindow(SW_HIDE);
	//OnColor(RGB(255, 0, 0));


#endif

//Wave
#if 1
//		m_slider[SLIDER_KBLEDS6_BRGIHTNESS].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_WAVE], SLIDER_KBLEDS6_BRGIHTNESS, CRect(99,  10,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	m_slider[SLIDER_KBLEDS6_SPEED].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KEYLEDS_WAVE], SLIDER_KBLEDS6_SPEED, CRect(99,  30,  0,  0), IDB_SLIDERBAR_ON, IDB_SLIDERBAR_ON, IDB_SLIDERBAR_OFF, IDB_SLIDERBG_OFF, IDB_SLIDERBG_ON, IDB_SLIDERBG_OFF, CLR_TRPT));
	//m_slider[SLIDER_KBLEDS6_RGB].CreateSliderCtrl(UI_SLIDERCTRL(&m_stc[STC_KBLEDS6_COLORBG], SLIDER_KBLEDS6_RGB,	CRect(2, 1, 216, 15), IDB_SLIDER_RGBBAR, IDB_SLIDER_RGBBAR, 0, 0, 0, 0, CLR_TRPT));
	m_mulitslider[SLIDER_KBLEDS6_RGB].CreateSliderCtrl(UI_MULITSLIDERCTRL(&m_stc[STC_KBLEDS6_COLORBG], SLIDER_KBLEDS6_RGB, CRect(2, 1, 216, 15), IDB_SLIDER_RGBBAR, IDB_SLIDER_RGBBAR, 0, IDB_KBLED_BAR_BG_COLOR, IDB_KBLED_BAR_BG_COLOR, 0, CLR_TRPT));

	m_mulitslider[SLIDER_KBLEDS6_RGB].SetRange(0, 359);
	m_slider[SLIDER_KBLEDS6_SPEED].SetRange(0, 10);
	m_slider[SLIDER_KBLEDS6_SPEED].SetPos(10);
//	m_slider[SLIDER_KBLEDS6_BRGIHTNESS].SetRange(0 ,100);
	OnColor(RGB(255, 0, 0));

	m_edit[EDIT_KBLEDS6_ANGLE].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(93,  195, 120,  210), &m_stc[STC_KEYLEDS_WAVE], EDIT_KBLEDS6_ANGLE);
	m_edit[EDIT_KBLEDS6_ANGLE].SetFont(Font(12), CLR_WHITE);
	m_edit[EDIT_KBLEDS6_ANGLE].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS6_ANGLE].SetAsIntNumberEdit(3);
	m_edit[EDIT_KBLEDS6_ANGLE].SetWindowText(_T("1"));

	m_edit[EDIT_KBLEDS6_TIMES].Create(WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_AUTOHSCROLL | ES_CENTER, CRect(198,  195, 218,  210), &m_stc[STC_KEYLEDS_WAVE], EDIT_KBLEDS6_TIMES);
	m_edit[EDIT_KBLEDS6_TIMES].SetFont(Font(12), CLR_WHITE);
	m_edit[EDIT_KBLEDS6_TIMES].SetBkColor(CLR_DARK);
	m_edit[EDIT_KBLEDS6_TIMES].SetAsIntNumberEdit(1);
	m_edit[EDIT_KBLEDS6_TIMES].SetWindowText(_T("8"));

 	m_combobox[COMBOX_KNLEDS_WAVE].Create(CRect(13, 90, 0, 0), &m_stc[STC_KEYLEDS_WAVE], COMBOX_KNLEDS_WAVE);
 	m_combobox[COMBOX_KNLEDS_WAVE].SetComboBoxBitmap(IDB_KBLED_CMB_ON, IDB_KBLED_CMB_ON, IDB_KBLED_CMB_ON, IDB_KBLED_CMB_OFF, CLR_TRPT);
 	m_combobox[COMBOX_KNLEDS_WAVE].SetFont(Font(12), CLR_WHITE); // 字体
 	m_combobox[COMBOX_KNLEDS_WAVE].SetCursor(IDC_CUR_HAND); // 鼠标手型
 	m_combobox[COMBOX_KNLEDS_WAVE].SetArrowWidth(20);
 	m_combobox[COMBOX_KNLEDS_WAVE].GetDropList()->SetFont(Font(14));
 	m_combobox[COMBOX_KNLEDS_WAVE].GetDropList()->SetBkColor(RGB(0, 0, 0));
 	m_combobox[COMBOX_KNLEDS_WAVE].GetDropList()->SetHighlightBkColor(CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_WAVE].ModifyCtrlStyle(ST_RIGHT,ST_LEFT);
 
 	m_combobox[COMBOX_KNLEDS_WAVE].AddString(_T("color spectrum"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_WAVE].SetCurSel(0);

	m_AngleCtrl.CreateAngle(UI_ANGLE(&m_stc[STC_KEYLEDS_WAVE], ANG_KBLED_WAVE, CRect(8, 180, 48, 220), RGB(0x66, 0x66, 0x66), RGB(0, 0, 0), 0, 0));
 
 	m_combobox[COMBOX_KNLEDS_WAVE_START].Create(CRect(53, 160, 0, 0), &m_stc[STC_KEYLEDS_WAVE], COMBOX_KNLEDS_RIPPLE_START);
 	m_combobox[COMBOX_KNLEDS_WAVE_START].SetComboBoxBitmap(IDB_KBLED_CMB_EDIT, IDB_KBLED_CMB_EDIT, IDB_KBLED_CMB_EDIT, 0, CLR_TRPT);
 	m_combobox[COMBOX_KNLEDS_WAVE_START].SetFont(Font(11), CLR_WHITE); // 字体
 	m_combobox[COMBOX_KNLEDS_WAVE_START].SetCursor(IDC_CUR_HAND); // 鼠标手型
 	m_combobox[COMBOX_KNLEDS_WAVE_START].SetArrowWidth(2);
 	m_combobox[COMBOX_KNLEDS_WAVE_START].GetDropList()->SetFont(Font(11));
 	m_combobox[COMBOX_KNLEDS_WAVE_START].GetDropList()->SetBkColor(RGB(0, 0, 0));
 	m_combobox[COMBOX_KNLEDS_WAVE_START].GetDropList()->SetHighlightBkColor(CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_WAVE_START].ModifyCtrlStyle(ST_RIGHT,ST_LEFT);
 
 	m_combobox[COMBOX_KNLEDS_WAVE_START].AddString(_T("on key press"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_WAVE_START].AddString(_T("automatic"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_WAVE_START].SetCurSel(0);
 
 	m_combobox[COMBOX_KNLEDS_WAVE_END].Create(CRect(188, 160, 0, 0), &m_stc[STC_KEYLEDS_WAVE], COMBOX_KNLEDS_RIPPLE_END);
 	m_combobox[COMBOX_KNLEDS_WAVE_END].SetComboBoxBitmap(IDB_KBLED_CMB_EDIT, IDB_KBLED_CMB_EDIT, IDB_KBLED_CMB_EDIT, 0, CLR_TRPT);
 	m_combobox[COMBOX_KNLEDS_WAVE_END].SetFont(Font(11), CLR_WHITE); // 字体
 	m_combobox[COMBOX_KNLEDS_WAVE_END].SetCursor(IDC_CUR_HAND); // 鼠标手型
 	m_combobox[COMBOX_KNLEDS_WAVE_END].SetArrowWidth(2);
 	m_combobox[COMBOX_KNLEDS_WAVE_END].GetDropList()->SetFont(Font(11));
 	m_combobox[COMBOX_KNLEDS_WAVE_END].GetDropList()->SetBkColor(RGB(0, 0, 0));
 	m_combobox[COMBOX_KNLEDS_WAVE_END].GetDropList()->SetHighlightBkColor(CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_WAVE_END].ModifyCtrlStyle(ST_RIGHT,ST_LEFT);
 
 	m_combobox[COMBOX_KNLEDS_WAVE_END].AddString(_T("never"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_WAVE_END].AddString(_T("time"), 0, CLR_MAIN);
 	m_combobox[COMBOX_KNLEDS_WAVE_END].SetCurSel(0);


#endif


//	CRect rcWin;
// 	m_StyleConsist.Create(IDD_VGA_LED_DIALOG, this);
// 	m_StyleConsist.GetWindowRect(rcWin);
// 	m_StyleConsist.MoveWindow(6, 75, rcWin.Width(), rcWin.Height());

// 	m_StylePulsing.Create(IDD_VGA_LED_DIALOG, this);
// 	m_StylePulsing.GetWindowRect(rcWin);
// 	m_StylePulsing.MoveWindow(6, 75, rcWin.Width(), rcWin.Height());

// 	m_StyleReactive.Create(IDD_VGA_LED_DIALOG, this);
// 	m_StyleReactive.GetWindowRect(rcWin);
// 	m_StyleReactive.MoveWindow(6, 75, rcWin.Width(), rcWin.Height());

// 	m_StyleRipple.Create(IDD_VGA_LED_DIALOG, this);
// 	m_StyleRipple.GetWindowRect(rcWin);
// 	m_StyleRipple.MoveWindow(6, 75, rcWin.Width(), rcWin.Height());

// 	m_StyleCycling.Create(IDD_VGA_LED_DIALOG, this);
// 	m_StyleCycling.GetWindowRect(rcWin);
// 	m_StyleCycling.MoveWindow(6, 75, rcWin.Width(), rcWin.Height());

// 	m_StyleWave.Create(IDD_VGA_LED_DIALOG, this);
// 	m_StyleWave.GetWindowRect(rcWin);
// 	m_StyleWave.MoveWindow(6, 75, rcWin.Width(), rcWin.Height());

//	m_StyleConsist.ShowWindow(SW_SHOW);

	m_stc[STC_KEYLEDS_CONSISTANCE].ShowWindow(SW_SHOW);
	m_stc[STC_KEYLEDS_PULSING].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_REACTIVE].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_RIPPLE].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_CYCING].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_WAVE].ShowWindow(SW_HIDE);

	//if (!s_VgaCtrl.GetBaseSetting().bSyncLed)
	//{
		m_nCurStyle = 0;
		SwitchStyle(m_nCurStyle);
	//}
}

void CKBLedStyleDlg::SwitchStyle(int nStyle)
{
//	m_StyleConsist.ShowWindow(SW_HIDE);
//	m_StylePulsing.ShowWindow(SW_HIDE);
//	m_StyleReactive.ShowWindow(SW_HIDE);
//	m_StyleRipple.ShowWindow(SW_HIDE);
//	m_StyleCycling.ShowWindow(SW_HIDE);
//	m_StyleWave.ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_CONSISTANCE].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_PULSING].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_REACTIVE].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_CYCING].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_RIPPLE].ShowWindow(SW_HIDE);
	m_stc[STC_KEYLEDS_WAVE].ShowWindow(SW_HIDE);

	switch(nStyle)
	{
	case 0:	// Consistence
//		m_StyleConsist.ShowWindow(SW_SHOW);
		m_stc[STC_KEYLEDS_CONSISTANCE].ShowWindow(SW_SHOW);
		break;
	case 1: // Pulsing

		m_stc[STC_KEYLEDS_PULSING].ShowWindow(SW_SHOW);
//		m_StylePulsing.ShowWindow(SW_SHOW);
		break;
	case 2: // Reactive
//		m_StyleReactive.ShowWindow(SW_SHOW);
		m_stc[STC_KEYLEDS_REACTIVE].ShowWindow(SW_SHOW);
		break;
	case 3: // Ripple
//		m_StyleRipple.ShowWindow(SW_SHOW); 
		m_stc[STC_KEYLEDS_RIPPLE].ShowWindow(SW_SHOW);
		break;
	case 4: // Cycling
//		m_StyleCycling.ShowWindow(SW_SHOW); 
		m_stc[STC_KEYLEDS_CYCING].ShowWindow(SW_SHOW);
		break;
	case 5: // Wave
//		m_StyleWave.ShowWindow(SW_SHOW); 
		m_stc[STC_KEYLEDS_WAVE].ShowWindow(SW_SHOW);
		break;
	}
}

LRESULT CKBLedStyleDlg::OnUiButtonClicked(WPARAM wParam, LPARAM lParam)
{
	switch(wParam)
	{
	case BTN_KBLEDS_ONOFF: {
		bool bOn = m_btn[BTN_KBLEDS_ONOFF].IsCheck();
		m_stc[STC_KEYLEDS_CONSISTANCE].EnableWindow(bOn);
		m_stc[STC_KEYLEDS_PULSING].EnableWindow(bOn);
		m_stc[STC_KEYLEDS_REACTIVE].EnableWindow(bOn);
		m_stc[STC_KEYLEDS_RIPPLE].EnableWindow(bOn);
		m_stc[STC_KEYLEDS_CYCING].EnableWindow(bOn);
		m_stc[STC_KEYLEDS_WAVE].EnableWindow(bOn);
		} break;
	case BTN_KBLEDS_CLOSE: 
		ShowWindow(SW_HIDE); break;
	case BTN_KBLEDS1_COLOR_1:
	case BTN_KBLEDS1_COLOR_2:
	case BTN_KBLEDS1_COLOR_3:
	case BTN_KBLEDS1_COLOR_4:
	case BTN_KBLEDS1_COLOR_5:
	case BTN_KBLEDS1_COLOR_6:
	case BTN_KBLEDS1_COLOR_7:
	case BTN_KBLEDS1_COLOR_8:
	case BTN_KBLEDS1_COLOR_9:
	//	CurColor = s_clr[wParam - BTN_KBLEDS1_COLOR_1];
		OnColor(s_clr[wParam - BTN_KBLEDS1_COLOR_1]);		
		break;

	case BTN_KBLEDS2_COLOR_1:
	case BTN_KBLEDS2_COLOR_2:
	case BTN_KBLEDS2_COLOR_3:
	case BTN_KBLEDS2_COLOR_4:
	case BTN_KBLEDS2_COLOR_5:
	case BTN_KBLEDS2_COLOR_6:
	case BTN_KBLEDS2_COLOR_7:
	case BTN_KBLEDS2_COLOR_8:
	case BTN_KBLEDS2_COLOR_9:
	//	CurColor = s_clr[wParam - BTN_KBLEDS2_COLOR_1];
		OnColor(s_clr[wParam - BTN_KBLEDS2_COLOR_1]);		
		break;

	case BTN_KBLEDS3_COLOR_1:
	case BTN_KBLEDS3_COLOR_2:
	case BTN_KBLEDS3_COLOR_3:
	case BTN_KBLEDS3_COLOR_4:
	case BTN_KBLEDS3_COLOR_5:
	case BTN_KBLEDS3_COLOR_6:
	case BTN_KBLEDS3_COLOR_7:
	case BTN_KBLEDS3_COLOR_8:
	case BTN_KBLEDS3_COLOR_9:
	//	CurColor = s_clr[wParam - BTN_KBLEDS3_COLOR_1];
		OnColor(s_clr[wParam - BTN_KBLEDS3_COLOR_1]);		
		break;
	case BTN_KBLEDS2_SEL1: 
	case BTN_KBLEDS2_SEL2:
		m_btn[BTN_KBLEDS2_SEL1].SetCheck(BTN_KBLEDS2_SEL1 == wParam);
		m_btn[BTN_KBLEDS2_SEL2].SetCheck(BTN_KBLEDS2_SEL2 == wParam);
		break;
	case BTN_KBLEDS4_ADDMODE:
		{
			int nCount = m_combobox[COMBOX_KNLEDS_RIPPLE].GetCount();
			if(nCount >= 10) break;
			KB_CLR_CFG clr;
			CString sName;
			sName.Format(_T("color spectrum %d"), nCount);
			m_combobox[COMBOX_KNLEDS_RIPPLE].AddString(sName, 0, CLR_MAIN);
			m_combobox[COMBOX_KNLEDS_RIPPLE].SetCurSel(m_config[3].nClrCount);
			m_mulitslider[SLIDER_KBLEDS4_RGB].Reset();
			clr.nCount = 2;
			clr.clrList[0] = s_clrKbLed[0];
			clr.clrList[1] = s_clrKbLed[7];

			m_nRippleLastSel = m_config[3].nClrCount;

			m_config[3].clrCfg[m_config[3].nClrCount++] = clr;
			ShowClr(3, m_config[3].clrCfg);
			CKbCfg::SetClrCfgs(m_config[3].clrCfg, 3, m_config[3].nClrCount);
			//OnApply(false);
			break;
		}
	case BTN_KBLEDS4_DELMODE:
		{
			int nIndex = m_combobox[COMBOX_KNLEDS_RIPPLE].GetCurSel();
			if(0 > nIndex) break;
			m_combobox[COMBOX_KNLEDS_RIPPLE].DeleteString(nIndex);
			m_combobox[COMBOX_KNLEDS_RIPPLE].SetCurSel(0);
			for (int i = nIndex; i < m_config[3].nClrCount - 1; i ++)
			{
				m_config[3].clrCfg[nIndex] = m_config[3].clrCfg[nIndex + 1];
			}
			m_config[3].clrCfg[m_config[3].nClrCount].nCount = 0;
			m_config[3].nClrCount--;
			ShowClr(3, m_config[3].clrCfg);
			CKbCfg::SetClrCfgs(m_config[3].clrCfg, 3, m_config[3].nClrCount);
			//OnApply(false);
			break;
		}

	case BTN_KBLEDS6_ADDMODE:
		{
			int nCount = m_combobox[COMBOX_KNLEDS_WAVE].GetCount();
			if(nCount >= 10) break;
			KB_CLR_CFG clr;
			CString sName;
			sName.Format(_T("preset %d"), nCount);
			m_combobox[COMBOX_KNLEDS_WAVE].AddString(sName, 0, CLR_MAIN);
			m_combobox[COMBOX_KNLEDS_WAVE].SetCurSel(m_config[5].nClrCount);
			m_mulitslider[SLIDER_KBLEDS6_RGB].Reset();
			clr.nCount = 2;
			clr.clrList[0] = s_clrKbLed[0];
			clr.clrList[1] = s_clrKbLed[7];
			m_nWaveLastSel = m_config[5].nClrCount;
			m_config[5].clrCfg[m_config[5].nClrCount++] = clr;
			ShowClr(5, m_config[5].clrCfg);
			CKbCfg::SetClrCfgs(m_config[5].clrCfg, 5, m_config[5].nClrCount);
			//OnApply(false);
			break;
		}
	case BTN_KBLEDS6_DELMODE:
		{
			int nIndex = m_combobox[COMBOX_KNLEDS_WAVE].GetCurSel();
			if(0 > nIndex) break;
			m_combobox[COMBOX_KNLEDS_WAVE].DeleteString(nIndex);
			m_combobox[COMBOX_KNLEDS_WAVE].SetCurSel(0);
			for (int i = nIndex; i < m_config[5].nClrCount - 1; i ++)
			{
				m_config[5].clrCfg[nIndex] = m_config[5].clrCfg[nIndex + 1];
			}
			m_config[5].clrCfg[m_config[5].nClrCount].nCount = 0;
			m_config[5].nClrCount--;
			ShowClr(5, m_config[5].clrCfg);
			CKbCfg::SetClrCfgs(m_config[5].clrCfg, 5, m_config[5].nClrCount);
			//OnApply(false);
			break;
		}

	case BTN_KBLEDS4_WIDTH_UP:
	case BTN_KBLEDS4_WIDTH_DOWN:				// Width
		{
			int nWidth = m_edit[EDIT_KBLEDS4_WIDTH].GetWindowsValue() +
				(BTN_KBLEDS4_WIDTH_UP == wParam ? 1 : -1);
			if(nWidth < 9 && nWidth > 0)
				m_edit[EDIT_KBLEDS4_WIDTH].SetWindowsValue(nWidth);
			//OnApply(false);
			break;
		}		
	case BTN_KBLEDS4_TIME_UP:
	case BTN_KBLEDS4_TIME_DOWN:				// Time
		{
			int nTimes = m_edit[EDIT_KBLEDS4_TIMES].GetWindowsValue() +
				(BTN_KBLEDS4_TIME_UP == wParam ? 1 : -1);
			if(nTimes < 10 && nTimes > 0)
				m_edit[EDIT_KBLEDS4_TIMES].SetWindowsValue(nTimes);
			//OnApply(false);
			break;
		}
	case BTN_KBLEDS6_ANGLE_UP:
	case BTN_KBLEDS6_ANGLE_DOWN:					// Angle
		{
			int nAngel = ((int)m_edit[EDIT_KBLEDS6_ANGLE].GetWindowsValue() +
				(BTN_KBLEDS6_ANGLE_UP == wParam ? 1 : -1));
			if(nAngel < 0) nAngel += 360;
			nAngel = nAngel % 360;
			m_edit[EDIT_KBLEDS6_ANGLE].SetWindowsValue(nAngel);
			m_AngleCtrl.SetValue(nAngel);
			//OnApply(false);
			break;
		}
	case BTN_KBLEDS6_TIME_UP:
	case BTN_KBLEDS6_TIME_DOWN:					// Times
		{
			int nTimes = m_edit[EDIT_KBLEDS6_TIMES].GetWindowsValue() +
				(BTN_KBLEDS6_TIME_UP == wParam ? 1 : -1);
			if(nTimes < 10 && nTimes > 0)
				m_edit[EDIT_KBLEDS6_TIMES].SetWindowsValue(nTimes);
			//OnApply(false);
			break;
		}
	}

	return 0;
}

LRESULT CKBLedStyleDlg::OnUiComboBoxSelChanged(WPARAM wParam, LPARAM lParam)
{
	int nCurSel = (int)lParam; 
	//if (COMBOX_KBLEDS_STYLE == wParam)
	switch (wParam)
	{
	case COMBOX_KBLEDS_STYLE:
		if ((bSyncCyclingSty)&&(nCurSel == 2))
		{
			SwitchStyle(nCurSel+2);//統一控燈模式選擇CYCLING需要nCurSel+2以顯示CYCLING界面
		}
		else {
			SwitchStyle(nCurSel);
		}
		
		m_nCurStyle = nCurSel;
		break;	
	case COMBOX_KNLEDS_RIPPLE: //Ripple 下拉框
		{	
			SaveCLRPress(COMBOX_KNLEDS_RIPPLE);
			//OnApply(false);
			break;
		}
	}

	return 1;
}

void CKBLedStyleDlg::OnFit(CRect rcParentCli)
{
//	int nX = rcParentCli.left - 306;
	int nX = rcParentCli.left + rcParentCli.Width();;
	int nY = rcParentCli.top + 79;

	SetWindowPos(NULL, nX, nY, 0, 0, SWP_NOACTIVATE | SWP_NOSIZE);
	SetWindowPos(&wndTop, 0, 0 , 0, 0, SWP_NOMOVE | SWP_NOACTIVATE | SWP_NOSIZE);
}


void CKBLedStyleDlg::InitState()
{
	//CAORUSDlg* pParent = (CAORUSDlg*)AfxGetMainWnd();
	//CRect rcCli;
	//pParent->GetClientRect(rcCli);
	//pParent->ClientToScreen(&rcCli);
	//OnFit(rcCli);

	// Initialize monitoring curves.

	//ShowWindow(SW_SHOW);
	//SetTimer(2, 10, NULL);

	//m_EditDlg.InitState();
}

/*void CKBLedStyleDlg::OnColor(COLORREF clr)
{
	double r = GetRValue(clr);
	double g = GetGValue(clr);
	double b = GetBValue(clr);
	m_edit[EDIT_KBLEDS1_R].SetWindowsValue(r);
	m_edit[EDIT_KBLEDS1_G].SetWindowsValue(g);
	m_edit[EDIT_KBLEDS1_B].SetWindowsValue(b);
	m_slider[SLIDER_KBLEDS1_RGB].SetPos((int)RGBtoHSB(clr));


	if (r == 255 && g == 0 && b == 255) { b -= 1; clr = RGB(r, g, b); }
}*/

BOOL CKBLedStyleDlg::PreTranslateMessage(MSG* pMsg)
{
	if(pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_RETURN)    
	{    
		DWORD dwID = GetFocus()->GetDlgCtrlID();
		switch(dwID)
		{
		case EDIT_KBLEDS1_R:
		case EDIT_KBLEDS1_G:
		case EDIT_KBLEDS1_B:	
			{
				CString sR, sG, sB;
				m_edit[dwID].GetWindowText(sR);
				if(_ttoi(sR) < 0) sR.Format(_T("%03d"), 0);
				if(_ttoi(sR) > 255) sR.Format(_T("%03d"), 255);
				m_edit[dwID].SetWindowText(sR);

				m_edit[EDIT_KBLEDS1_R].GetWindowText(sR);
				m_edit[EDIT_KBLEDS1_G].GetWindowText(sG);
				m_edit[EDIT_KBLEDS1_B].GetWindowText(sB);
				OnColor(RGB(_ttoi(sR), _ttoi(sG), _ttoi(sB)));

				break;
			}
		case EDIT_KBLEDS2_R:
		case EDIT_KBLEDS2_G:
		case EDIT_KBLEDS2_B:
			{
				CString sR, sG, sB;
				m_edit[dwID].GetWindowText(sR);
				if(_ttoi(sR) < 0) sR.Format(_T("%03d"), 0);
				if(_ttoi(sR) > 255) sR.Format(_T("%03d"), 255);
				m_edit[dwID].SetWindowText(sR);

				m_edit[EDIT_KBLEDS2_R].GetWindowText(sR);
				m_edit[EDIT_KBLEDS2_G].GetWindowText(sG);
				m_edit[EDIT_KBLEDS2_B].GetWindowText(sB);
				OnColor(RGB(_ttoi(sR), _ttoi(sG), _ttoi(sB)));
				break;
			}
		case EDIT_KBLEDS3_R:
		case EDIT_KBLEDS3_G:
		case EDIT_KBLEDS3_B:
			{
				CString sR, sG, sB;
				m_edit[dwID].GetWindowText(sR);
				if(_ttoi(sR) < 0) sR.Format(_T("%03d"), 0);
				if(_ttoi(sR) > 255) sR.Format(_T("%03d"), 255);
				m_edit[dwID].SetWindowText(sR);

				m_edit[EDIT_KBLEDS3_R].GetWindowText(sR);
				m_edit[EDIT_KBLEDS3_G].GetWindowText(sG);
				m_edit[EDIT_KBLEDS3_B].GetWindowText(sB);
				OnColor(RGB(_ttoi(sR), _ttoi(sG), _ttoi(sB)));
			//	OnApply();
				break;
			}
		case EDIT_KBLEDS5_R:
		case EDIT_KBLEDS5_G:
		case EDIT_KBLEDS5_B:	
			{
				CString sR, sG, sB;
				m_edit[dwID].GetWindowText(sR);
				if(_ttoi(sR) < 0) sR.Format(_T("%03d"), 0);
				if(_ttoi(sR) > 255) sR.Format(_T("%03d"), 255);
				m_edit[dwID].SetWindowText(sR);

				m_edit[EDIT_KBLEDS5_R].GetWindowText(sR);
				m_edit[EDIT_KBLEDS5_G].GetWindowText(sG);
				m_edit[EDIT_KBLEDS5_B].GetWindowText(sB);
				OnColor(RGB(_ttoi(sR), _ttoi(sG), _ttoi(sB)));
			//	OnApply();
				break;
			}
// 		case EDIT_KB_LED_CONSISTENT_CODE:
// 			{
// 				CString sCode;
// 				m_edit[dwID].GetWindowText(sCode);
// 				if(sCode.GetLength() < 6) break;
// 
// 				OnColor(HexToRGB(sCode), 0);
// 				OnApply(false);
// 				break;
// 			}
// 		case EDIT_KB_LED_BREATHING_CODE:
// 			{
// 				CString sCode;
// 				m_edit[dwID].GetWindowText(sCode);
// 				if(sCode.GetLength() < 6) break;
// 
// 				OnColor(HexToRGB(sCode), 1);
// 				OnApply(false);
// 				break;
// 			}
// 		case EDIT_KB_LED_REACTIVE_CODE:
// 			{
// 				CString sCode;
// 				m_edit[dwID].GetWindowText(sCode);
// 				if(sCode.GetLength() < 6) break;
// 
// 				OnColor(HexToRGB(sCode), 2);
// 				OnApply(false);
// 				break;
// 			}
		case EDIT_KBLEDS6_ANGLE: 
			{
				int nAngel = m_edit[dwID].GetWindowsValue();
				if(nAngel < 0) nAngel += 360;
				nAngel = nAngel % 360;
				m_edit[EDIT_KBLEDS6_ANGLE].SetWindowsValue(nAngel);
				m_AngleCtrl.SetValue(nAngel);
				break;
			}
		/*case EDIT_KB_LED_RIPPLE_WIDTH:
		case EDIT_KB_LED_RIPPLE_TIMES:
		case EDIT_KB_LED_WAVE_TIMES:
			OnApply(false);
			break;*/
		}
		return TRUE;
	}
 	else if (pMsg->message == WM_KEYDOWN && (pMsg->wParam == VK_ESCAPE)) //攔截enter和esc按鍵
 	{
 		return TRUE; // 攔截消息
 	}

	return CUiDlg::PreTranslateMessage(pMsg);
}

void CKBLedStyleDlg::EditRGBChange()
{
	CString sR, sG, sB;

// 	m_edit[EDIT_KBLEDS1_R].GetWindowText(sR);
// 	if(_ttoi(sR) < 0) sR.Format(_T("%03d"), 0);
// 	if(_ttoi(sR) > 255) sR.Format(_T("%03d"), 255);
// 	m_edit[EDIT_KBLEDS1_R].SetWindowText(sR);
// 
// 	m_edit[EDIT_KBLEDS1_G].GetWindowText(sG);
// 	if(_ttoi(sG) < 0) sG.Format(_T("%03d"), 0);
// 	if(_ttoi(sG) > 255) sG.Format(_T("%03d"), 255);
// 	m_edit[EDIT_KBLEDS1_G].SetWindowText(sG);
// 
// 	m_edit[EDIT_KBLEDS1_B].GetWindowText(sB);
// 	if(_ttoi(sB) < 0) sB.Format(_T("%03d"), 0);
// 	if(_ttoi(sB) > 255) sB.Format(_T("%03d"), 255);
// 	m_edit[EDIT_KBLEDS1_B].SetWindowText(sB);
// 
// 	m_slider[SLIDER_KBLEDS1_RGB].SetPos((int)RGBtoHSB(RGB(_ttoi(sR), _ttoi(sG), _ttoi(sB))));
}

LRESULT CKBLedStyleDlg::OnUiSliderMoved(WPARAM wParam, LPARAM lParam)
{
	int nCurValue = (int)lParam;
//  	switch(wParam)
//  	{
//  	case SLIDER_KBLEDS1_RGB: { 
//  		COLORREF clr = HSBToRGB((float)nCurValue);
//  		OnColor(clr);
//  							 } break;
//  	case SLIDER_KBLEDS1_BRGIHTNESS: break;
//  	case SLIDER_KBLEDS1_SPEED: break;
//  	}

	return 1;
}

LRESULT CKBLedStyleDlg::OnUiSliderMoving(WPARAM wParam, LPARAM lParam)
{
	int nCurValue = (int)lParam;
  	switch (wParam)
  	{	
  	case SLIDER_KBLEDS1_RGB: 
	case SLIDER_KBLEDS2_RGB: 
	case SLIDER_KBLEDS3_RGB: 
		OnColor(HSBToRGB((float)nCurValue)); 
		break;
  	}
	return 1;
}

LRESULT CKBLedStyleDlg::OnUiEditChanged(WPARAM wParam, LPARAM lParam)
{
//  	switch(wParam)
//  	{
//  	case EDIT_KBLEDS1_R: case EDIT_KBLEDS1_G: case EDIT_KBLEDS1_B: {
//  		CString sR, sG, sB;
//  		m_edit[wParam].GetWindowText(sR);
//  		if(_ttoi(sR) < 0) sR.Format(_T("%03d"), 0);
//  		if(_ttoi(sR) > 255) sR.Format(_T("%03d"), 255);
//  		m_edit[wParam].SetWindowText(sR);
//  		m_edit[EDIT_KBLEDS1_R].GetWindowText(sR);
//  		m_edit[EDIT_KBLEDS1_G].GetWindowText(sG);
//  		m_edit[EDIT_KBLEDS1_B].GetWindowText(sB);
//  						 } break;
//  	}
 	return 1;
}

void CKBLedStyleDlg::OnColor(COLORREF clr)
{
	CurColor = clr;
	switch(m_nCurStyle)
	{
	case SEL_STYLE_CONSISTENCE: 
		{
			m_edit[EDIT_KBLEDS1_R].SetWindowsValue(GetRValue(clr));
			m_edit[EDIT_KBLEDS1_G].SetWindowsValue(GetGValue(clr));
			m_edit[EDIT_KBLEDS1_B].SetWindowsValue(GetBValue(clr));
			m_slider[SLIDER_KBLEDS1_RGB].SetPos((int)RGBtoHSB(clr));
			
			if(clr == RGB(255, 0, 255)) clr = RGB(255, 1, 255);
			m_stc[STC_KEYLEDS_CONSISTANCE].SetBkColor(clr); 
			break;
		}
	case SEL_STYLE_PULSING:
		{
			m_edit[EDIT_KBLEDS2_R].SetWindowsValue(GetRValue(clr));
			m_edit[EDIT_KBLEDS2_G].SetWindowsValue(GetGValue(clr));
			m_edit[EDIT_KBLEDS2_B].SetWindowsValue(GetBValue(clr));
			m_slider[SLIDER_KBLEDS2_RGB].SetPos((int)RGBtoHSB(clr));
			//m_edit[EDIT_KB_LED_BREATHING_CODE].SetWindowText(RGBToHex(clr));
			if(clr == RGB(255, 0, 255)) clr = RGB(255, 1, 255);
			if(m_btn[BTN_KBLEDS2_SEL1].IsCheck()) m_btn[BTN_KBLEDS2_SEL1].SetBkColor(clr); 
			if(m_btn[BTN_KBLEDS2_SEL2].IsCheck()) m_btn[BTN_KBLEDS2_SEL2].SetBkColor(clr); 
			break;
		}
	case SEL_STYLE_REACTIVE:
		{
			m_edit[EDIT_KBLEDS3_R].SetWindowsValue(GetRValue(clr));
			m_edit[EDIT_KBLEDS3_G].SetWindowsValue(GetGValue(clr));
			m_edit[EDIT_KBLEDS3_B].SetWindowsValue(GetBValue(clr));
			m_slider[SLIDER_KBLEDS3_RGB].SetPos((int)RGBtoHSB(clr));
			//m_edit[EDIT_KB_LED_REACTIVE_CODE].SetWindowText(RGBToHex(clr));
			if(clr == RGB(255, 0, 255)) clr = RGB(255, 1, 255);
			m_stc[STC_KEYLEDS_REACTIVE].SetBkColor(clr); 
			break;
		}
	}
}

int	CKBLedStyleDlg::GetCurStyle()
{ 
	return m_nCurStyle; 
}	

void CKBLedStyleDlg::ReadClr(int nStyle, KB_CLR_CFG& clr)
{
	switch(nStyle)
	{
	case SEL_STYLE_CONSISTENCE:
		{	
			clr.nCount = 1;
			clr.clrList[0] = m_stc[STC_KEYLEDS_CONSISTANCE].GetBkColor();
			break;
		}
	/*case LED_LOL:
		{	
			clr.nCount = 1;
			clr.clrList[0] = m_stc[STC_KB_LED_LOL_CLR].GetBkColor();
			break;
		}
	case LED_CS:
		{	
			clr.nCount = 1;
			clr.clrList[0] = m_stc[STC_KB_LED_CS_CLR].GetBkColor();
			break;
		}*/
	case SEL_STYLE_PULSING:
		{
			clr.nCount = 0;
			if(m_btn[BTN_KBLEDS2_CLR1].IsCheck())
				clr.clrList[clr.nCount++] = m_btn[BTN_KBLEDS2_SEL1].GetBkColor();
			if(m_btn[BTN_KBLEDS2_CLR2].IsCheck())
				clr.clrList[clr.nCount++] = m_btn[BTN_KBLEDS2_SEL2].GetBkColor();
			break;
		}
	case SEL_STYLE_REACTIVE:
		{
			clr.nCount = 1;
			clr.clrList[0] = m_stc[STC_KEYLEDS_REACTIVE].GetBkColor();
			break;
		}
	case SEL_STYLE_RIPPLE:
		{
			clr.nCount = m_mulitslider[SLIDER_KBLEDS4_RGB].GetCount();
			for (int i = 0; i < clr.nCount; i++)
			{
				clr.clrList[i] = HSBToRGB(m_mulitslider[SLIDER_KBLEDS4_RGB].GetPos(i));
			}
			break;
		}
	case SEL_STYLE_CYCLING:
		{
			clr.clrList[0] = s_clrKbLed[0];
			clr.clrList[1] = s_clrKbLed[1];
			clr.clrList[2] = s_clrKbLed[2];
			clr.clrList[3] = s_clrKbLed[3];
			clr.clrList[4] = s_clrKbLed[4];
			clr.clrList[5] = s_clrKbLed[5];
			clr.clrList[6] = s_clrKbLed[7];
			clr.nCount = 7;
			break;
		}
	case SEL_STYLE_WAVE:
		{
			clr.nCount = m_mulitslider[SLIDER_KBLEDS6_RGB].GetCount();
			for (int i = 0; i < clr.nCount; i++)
			{
				clr.clrList[i] = HSBToRGB(m_mulitslider[SLIDER_KBLEDS6_RGB].GetPos(i));
			}
			break;
		}
	}
}

void CKBLedStyleDlg::ReadCfg(int nStyle, KB_LED_CFG& cfg)
{
	
	switch(nStyle)
	{
	case SEL_STYLE_CONSISTENCE:
		{
			cfg.nType = LED_CONSISTENT;
			ReadClr(nStyle, cfg.clrCfg[0]);
			//cfg.bOn = m_panel[PAN_KB_LED_CONSISTENT_SWITCH].GetCurItem() == 0;
			cfg.bOn = m_btn[BTN_KBLEDS_ONOFF].IsCheck();
			cfg.nBrightness = m_slider[SLIDER_KBLEDS1_BRGIHTNESS].GetPos();
			cfg.nSpeed = 10;
			break;
		}
	/*case LED_LOL:
		{	
			cfg.nType = LED_CONSISTENT;
			ReadClr(nPage, cfg.clrCfg[0]);
			cfg.nType = LED_CMD_LOL;
			cfg.bOn = m_panel[PAN_KB_LED_LOL_SWITCH].GetCurItem() == 0;
			cfg.nBrightness = m_fixslider[SLD_KB_LED_LOL_BRIGHT].GetPos();
			cfg.nSpeed = 10;
			break;
		}
	case LED_CS:
		{	
			cfg.nType = LED_CONSISTENT;
			ReadClr(nPage, cfg.clrCfg[0]);
			cfg.nType = LED_CMD_CS;
			cfg.bOn = m_panel[PAN_KB_LED_CS_SWITCH].GetCurItem() == 0;
			cfg.nBrightness = m_fixslider[SLD_KB_LED_CS_BRIGHT].GetPos();
			cfg.nSpeed = 10;
			break;
		}*/
	case SEL_STYLE_PULSING:
		{
			cfg.nType = LED_CONSISTENT;
			ReadClr(nStyle, cfg.clrCfg[0]);
			//cfg.bOn = m_panel[PAN_KB_LED_BREATHING_SWITCH].GetCurItem() < 2;
			cfg.bOn = m_btn[BTN_KBLEDS_ONOFF].IsCheck();
			if(m_panelColor.GetCurItem() == 1) 
				cfg.clrCfg[0].nCount = 7;
			
			cfg.nBrightness = m_slider[SLIDER_KBLEDS2_BRGIHTNESS].GetPos();
			cfg.nSpeed = m_slider[SLIDER_KBLEDS2_SPEED].GetPos();
			break;
		}
	case SEL_STYLE_REACTIVE:
		{
			ReadClr(nStyle, cfg.clrCfg[0]);
			cfg.bOn = m_btn[BTN_KBLEDS_ONOFF].IsCheck();
			cfg.nSpeed = m_slider[SLIDER_KBLEDS3_DURATION].GetPos();
			cfg.nBrightness = 10;
			break;
		}
	case SEL_STYLE_RIPPLE:
		{
			ReadClr(nStyle, cfg.clrCfg[0]);
			cfg.bOn = m_btn[BTN_KBLEDS_ONOFF].IsCheck();
			cfg.nSpeed = m_slider[SLIDER_KBLEDS4_SPEED].GetPos();
			cfg.nWidth = m_edit[EDIT_KBLEDS4_WIDTH].GetWindowsValue();
			cfg.nTimes = m_combobox[COMBOX_KNLEDS_RIPPLE_END].GetCurSel() == 0 ? 0 :
				m_edit[EDIT_KBLEDS4_TIMES].GetWindowsValue();
			cfg.nStartWay = m_combobox[COMBOX_KNLEDS_RIPPLE_START].GetCurSel();
			cfg.nBrightness = 10;
			break;		
		}
	case SEL_STYLE_CYCLING:
		{
			ReadClr(nStyle, cfg.clrCfg[0]);
			cfg.bOn = m_btn[BTN_KBLEDS_ONOFF].IsCheck();
			cfg.nSpeed = m_slider[SLIDER_KBLEDS5_SPEED].GetPos();
			cfg.nBrightness = m_slider[SLIDER_KBLEDS5_BRGIHTNESS].GetPos();
			break;
		}
	case SEL_STYLE_WAVE:
		{
			ReadClr(nStyle, cfg.clrCfg[0]);
			cfg.bOn =m_btn[BTN_KBLEDS_ONOFF].IsCheck();
			cfg.nSpeed = m_slider[SLIDER_KBLEDS6_SPEED].GetPos();
			cfg.nAngle = m_edit[EDIT_KBLEDS6_ANGLE].GetWindowsValue();
			cfg.nTimes = m_combobox[COMBOX_KNLEDS_WAVE_END].GetCurSel() == 0 ? 0 :
				m_edit[EDIT_KBLEDS6_TIMES].GetWindowsValue();
			cfg.nStartWay = m_combobox[COMBOX_KNLEDS_WAVE_START].GetCurSel();
			cfg.nBrightness = 10;
			break;
		}
	}
}

bool CKBLedStyleDlg::IsBreathing1Selected()
{
	return m_btn[BTN_KBLEDS2_SEL1].IsCheck();
}

void CKBLedStyleDlg::ShowClr(int nStyle, KB_CLR_CFG clr[])
{
	switch(nStyle)
	{
	/*case LED_CONSISTENT:
		{	
			OnColor(clr[0].clrList[0], 0);
			break;
		}
	case LED_LOL:
		{	
			OnColor(clr[0].clrList[0], 3);
			break;
		}
	case LED_CS:
		{	
			OnColor(clr[0].clrList[0], 4);
			break;
		}
	case LED_PULSING:
		{
			if(clr[0].nCount > 1)
			{
				m_btn[BTN_KB_LED_BREATHING_SEL1].SetCheck(false);
				m_btn[BTN_KB_LED_BREATHING_SEL2].SetCheck(true);
				m_btn[BTN_KB_LED_BREATHING_CLR2].SetCheck(true);
				OnColor(clr[0].clrList[1], 1);
			}
			if(clr[0].nCount > 0)
			{
				m_btn[BTN_KB_LED_BREATHING_SEL1].SetCheck(true);
				m_btn[BTN_KB_LED_BREATHING_SEL2].SetCheck(false);
				m_btn[BTN_KB_LED_BREATHING_CLR1].SetCheck(true);
				OnColor(clr[0].clrList[0], 1);
			}
			break;
		}
	case LED_REACTIVE:
		{
			OnColor(clr[0].clrList[0], 2);
			break;
		}*/
	case SEL_STYLE_RIPPLE:
		{
			int cot = m_combobox[COMBOX_KNLEDS_RIPPLE].GetCount();
			int cur = m_combobox[COMBOX_KNLEDS_RIPPLE].GetCurSel(); 
			if(cur < 0) cur = 0;
			m_combobox[COMBOX_KNLEDS_RIPPLE].ResetContent();
			CString sPresent;
			for (int i = 0; i < cot; i++)
			{
				//if(clr[i].nCount <= 0) break;
				sPresent.Format(_T("color spectrum %d"), i + 1);
				m_combobox[COMBOX_KNLEDS_RIPPLE].AddString(sPresent, 0, CLR_MAIN);
				if(i != cur) continue;
				int nCount = m_mulitslider[SLIDER_KBLEDS4_RGB].GetCount();
				for (int j = 0; j < clr[i].nCount; j++)
				{
					if(j < nCount) m_mulitslider[SLIDER_KBLEDS4_RGB].SetPos(j, RGBtoHSB(clr[i].clrList[j]));
					else m_mulitslider[SLIDER_KBLEDS4_RGB].AddPos(j, RGBtoHSB(clr[i].clrList[j]));
				}
			}
			m_combobox[COMBOX_KNLEDS_RIPPLE].SetCurSel(cur);
			break;
		}
	/*case LED_CYCLING:
		{
			break;
		}*/
	case SEL_STYLE_WAVE:
		{
			int cot = m_combobox[COMBOX_KNLEDS_WAVE].GetCount();
			int cur = m_combobox[COMBOX_KNLEDS_WAVE].GetCurSel(); 
			if(cur < 0) cur = 0;
			m_combobox[COMBOX_KNLEDS_WAVE].ResetContent();
			CString sPresent;
			for (int i = 0; i < cot; i++)
			{
				//if(clr[i].nCount <= 0) break;
				sPresent.Format(_T("color spectrum %d"), i + 1);
				m_combobox[COMBOX_KNLEDS_WAVE].AddString(sPresent, 0, CLR_MAIN);
				if(i != cur) continue;
				int nCount = m_mulitslider[SLIDER_KBLEDS6_RGB].GetCount();
				for (int j = 0; j < clr[i].nCount; j++)
				{
					if(j < nCount) m_mulitslider[SLIDER_KBLEDS6_RGB].SetPos(j, RGBtoHSB(clr[i].clrList[j]));
					else m_mulitslider[SLIDER_KBLEDS6_RGB].AddPos(j, RGBtoHSB(clr[i].clrList[j]));
				}
			}
			m_combobox[COMBOX_KNLEDS_WAVE].SetCurSel(cur);
			break;
		}
	}
}

LRESULT CKBLedStyleDlg::OnUiMulitSliderMoved(WPARAM wParam, LPARAM lParam)
{
	int nCurValue = (int)lParam;
	KB_CLR_CFG clr;
	switch(wParam)
	{
	case SLIDER_KBLEDS4_RGB:		
		{
			int nIndex = m_combobox[COMBOX_KNLEDS_RIPPLE].GetCurSel();
			ReadClr(3, clr); 
			CKbCfg::SetClrCfg(clr, LED_RIPPLE - 1, nIndex); 
			m_config[LED_RIPPLE - 1].clrCfg[nIndex] = clr;
			//OnApply(false);
			break;
		}
	/*case SLD_KB_LED_WAVE_CLR:		
		{
			int nIndex = m_combobox[CBB_KB_LED_WAVE_PRESENT].GetCurSel();
			ReadClr(5, clr); 
			CKbCfg::SetClrCfg(clr, LED_WAVE - 1, nIndex); 
			m_config[LED_WAVE - 1].clrCfg[nIndex] = clr;
			OnApply(false);
			break;
		}*/
	}
	return 0;
}

void CKBLedStyleDlg::LoadPresent()
{
	int nCount = 0;
	CString sPresent;
	CKbCfg::GetClrCfgs(m_config[LED_RIPPLE - 1].clrCfg, LED_RIPPLE - 1, nCount);
	m_combobox[COMBOX_KNLEDS_RIPPLE].ResetContent();
	for (int i = 0; i < nCount; i++)
	{
		sPresent.Format(_T("color spectrum %d"), i + 1);
		m_combobox[COMBOX_KNLEDS_RIPPLE].AddString(sPresent, 0, CLR_MAIN);
	}
	m_combobox[COMBOX_KNLEDS_RIPPLE].SetCurSel(0);
	ShowClr(LED_RIPPLE - 1, m_config[LED_RIPPLE - 1].clrCfg);
	m_config[LED_RIPPLE - 1].nClrCount = nCount;

	/*CKbCfg::GetClrCfgs(m_config[LED_WAVE - 1].clrCfg, LED_WAVE - 1, nCount);
	m_combobox[CBB_KB_LED_WAVE_PRESENT].ResetContent();
	for (int i = 0; i < nCount; i++)
	{
		sPresent.Format(_T("color spectrum %d"), i + 1);
		m_combobox[CBB_KB_LED_WAVE_PRESENT].AddString(sPresent, 0, CLR_MAIN);
	}
	m_combobox[CBB_KB_LED_WAVE_PRESENT].SetCurSel(0);
	ShowClr(LED_WAVE - 1, m_config[LED_WAVE - 1].clrCfg);
	m_config[LED_WAVE - 1].nClrCount = nCount;*/
}

void CKBLedStyleDlg::SaveCLRPress(int nType)
{
	switch (nType)
	{
	case COMBOX_KNLEDS_RIPPLE: //Ripple 下拉框
		{		
			int curClr =  m_combobox[COMBOX_KNLEDS_RIPPLE].GetCurSel();

			m_nRippleLastSel = curClr;

			m_mulitslider[SLIDER_KBLEDS4_RGB].Reset();

			KB_CLR_CFG clr = m_config[3].clrCfg[curClr];
			int nCount = m_mulitslider[SLIDER_KBLEDS4_RGB].GetCount();
			for (int j = 0; j < clr.nCount; j++)
			{
				if(j < nCount) m_mulitslider[SLIDER_KBLEDS4_RGB].SetPos(j, RGBtoHSB(clr.clrList[j]));
				else m_mulitslider[SLIDER_KBLEDS4_RGB].AddPos(j, RGBtoHSB(clr.clrList[j]));
			}

			break;
		}
	case COMBOX_KNLEDS_WAVE:
		{

			int curClr =  m_combobox[COMBOX_KNLEDS_WAVE].GetCurSel();

			m_nWaveLastSel = curClr;

			m_mulitslider[SLIDER_KBLEDS6_RGB].Reset();

			KB_CLR_CFG clr = m_config[5].clrCfg[curClr];
			int nCount = m_mulitslider[SLIDER_KBLEDS6_RGB].GetCount();
			for (int j = 0; j < clr.nCount; j++)
			{
				if(j < nCount) m_mulitslider[SLIDER_KBLEDS6_RGB].SetPos(j, RGBtoHSB(clr.clrList[j]));
				else m_mulitslider[SLIDER_KBLEDS6_RGB].AddPos(j, RGBtoHSB(clr.clrList[j]));
			}

			break;
		}
	}
}

LRESULT CKBLedStyleDlg::OnUiAngleChange(WPARAM wParam, LPARAM lParam)
{
	switch(wParam)
	{
	case ANG_KBLED_WAVE: 
		m_edit[EDIT_KBLEDS6_ANGLE].SetWindowsValue(lParam);
		//OnApply(false);
		break;
	}
	return 0;
}